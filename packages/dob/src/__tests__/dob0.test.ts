import { describe, expect, it } from 'vitest';
import { FloatRange, FloatVec, NumberRange, NumberVec, deserailizePattern, serailizePattern } from '../codec/dob0';
import { bytes } from '@ckb-lumos/codec';

// unicorn-like pattern
const pattern =
  'bc06000028000000d80000003b010000f9010000ed020000ec030000de0400003006000077060000b00000000c0000001700000007000000537069726974739900000008000000910000000c0000000d000000010000000080000000180000002b0000003d000000550000006b0000000f000000576f6f642c20426c756520426f64790e000000466972652c2052656420426f64791400000045617274682c20436f6c6f7266756c20426f6479120000004d6574616c2c20476f6c64656e20426f64791100000057617465722c20576869746520426f6479630000000c000000180000000800000059696e2059616e674b00000008000000430000000c0000000d0000000100000000320000000c000000200000001000000059616e672c2053686f727420486169720e00000059696e2c204c6f6e672068616972be0000000c000000170000000700000054616c656e7473a7000000080000009f0000000c0000000d00000001000000008e0000002c000000370000004000000049000000540000005d00000067000000710000007a00000084000000070000005265766976616c0500000044656174680500000043757273650700000050726f706865740500000043726f776e060000004865726d69740600000041747461636b0500000047756172640600000053756d6d6f6e06000000466f72676574f40000000c0000001400000004000000486f726ee000000008000000d80000000c0000000d0000000100000000c70000002c0000003b000000470000005b0000006a000000790000008900000099000000ac000000b90000000b0000005368616d616e20486f726e0800000048656c20486f726e100000004e6563726f6d616e63657220486f726e0b000000536962796c20486f726e200b00000043616573617220486f726e0c0000004c616f2054737520486f726e0c00000057617272696f7220486f726e0f00000050726165746f7269616e20486f726e090000004261726420486f726e0a0000004c6574686520486f726eff0000000c000000150000000500000057696e6773ea00000008000000e20000000c0000000d0000000100000000d10000002c0000003a000000500000006300000070000000800000008f000000a5000000b3000000c30000000a00000057696e642057696e6773120000004e6967687420536861646f772057696e67730f0000004c696768746e696e672057696e67730900000053756e2057696e67730c000000476f6c64656e2057696e67730b000000436c6f75642057696e6773120000004d6f726e696e6720476c6f772057696e67730a000000537461722057696e67730c000000537072696e672057696e67730a0000004d6f6f6e2057696e6773f20000000c00000015000000050000005461696c73dd00000008000000d50000000c0000000d0000000100000000c4000000280000003800000049000000590000006a0000008100000093000000a7000000b60000000c0000004d6574656f72205461696c730d0000005261696e626f77205461696c730c00000057696c6c6f77205461696c730d00000050686f656e6978205461696c731300000053756e73657420536861646f77205461696c730e000000536f637261746573205461696c731000000044756d626c65646f7265205461696c730b00000056656e7573205461696c730a00000047616961205461696c73520100000c0000001a0000000a000000486f72736573686f65733801000008000000300100000c0000000d00000001000000001f0100003000000042000000570000006a0000007e00000094000000a8000000bd000000d2000000ea000000020100000e00000049636520486f72736573686f65731100000044696d6f6e6420486f72736573686f65730f000000526f636b20486f72736573686f657310000000466c616d6520486f72736573686f6573120000005468756e64657220486f72736573686f6573100000004c6f74757320486f72736573686f65731100000053696c76657220486f72736573686f657311000000476f6c64656e20486f72736573686f657314000000526564204d61706c6520486f72736573686f657314000000426c7565204c616b6520486f72736573686f657319000000436f6c6f7266756c2053746f6e6520486f72736573686f6573470000000c0000001e0000000e00000044657374696e79204e756d6265722900000008000000210000000c0000000d000000040300000050c3000000000000a086010000000000450000000c0000001c0000000c0000004c75636b79204e756d6265722900000008000000210000000c0000000d000000010300000001000000000000003100000000000000';

describe('dob0', () => {
  it('should keep the same after deserialization and then serailization', () => {
    const traitsBase = deserailizePattern(pattern);
    const outputPattern = serailizePattern(traitsBase, 'hex');
    expect(outputPattern).eq(pattern);
  });

  it('should check FloatRange for specific', () => {
    const numeratorRange = new NumberRange(BigInt(10), BigInt(15));
    const floatRange = new FloatRange(numeratorRange, BigInt(2));
    const rawFloatRange = floatRange.pack();
    const outputFloatRange = FloatRange.unpack(rawFloatRange);
    expect(floatRange.denominator).eq(outputFloatRange.denominator);
    expect(floatRange.numeratorRange.start).eq(outputFloatRange.numeratorRange.start);
    expect(floatRange.numeratorRange.end).eq(outputFloatRange.numeratorRange.end);
  });

  it('should check FloatVec for specific', () => {
    const numeratorVec = new NumberVec([BigInt(10), BigInt(15)]);
    const floatVec = new FloatVec(numeratorVec, BigInt(2));
    const rawFloatVec = floatVec.pack();
    const outputFloatVec = FloatVec.unpack(rawFloatVec);
    expect(floatVec.denominator).eq(outputFloatVec.denominator);
    floatVec.numeratorVec.value.forEach((num, idx) => {
      expect(num).eq(outputFloatVec.numeratorVec.value[idx]);
    });
  });
});
